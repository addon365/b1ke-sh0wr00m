// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using addon365.Chit.Database.EfContext;

namespace addon365.Chit.Database.EfContext.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200417051523_businessprivillage")]
    partial class businessprivillage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("addon365")
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("addon365.Accounting.DataEntity.AccountBookFieldMapTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountBookKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldNameKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.HasIndex("AccountBookKeyId");

                    b.ToTable("Accounting.AccountBookFieldMaps");

                    b.HasData(
                        new
                        {
                            KeyId = new Guid("9fca1dc7-a435-4bcb-9355-f7b7a4ad8a95"),
                            AccountBookKeyId = new Guid("1b95a6c7-02e2-4628-a9a0-7c9f6f48b34f"),
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FieldNameKey = "addon365.Chit.DataEntity.ChitSubscriberDueTable.DueAmountInfoKeyId",
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            YearId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("addon365.Accounting.DataEntity.AccountBookTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProgId")
                        .HasColumnType("int");

                    b.Property<Guid>("UnderAccountGroupKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.ToTable("Accounting.AccountBooks");

                    b.HasData(
                        new
                        {
                            KeyId = new Guid("2f242136-24df-4561-a68c-d7cd749132b0"),
                            BookName = "Cash",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProgId = 1,
                            UnderAccountGroupKeyId = new Guid("8d9c5eed-e58a-4310-85d5-9fd11ea55f4c"),
                            YearId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            KeyId = new Guid("1b95a6c7-02e2-4628-a9a0-7c9f6f48b34f"),
                            BookName = "Chit Collection",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Modified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProgId = 0,
                            UnderAccountGroupKeyId = new Guid("838c911c-623f-4a8c-b63c-b5aaadc7fa69"),
                            YearId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("addon365.Accounting.DataEntity.AccountGroupTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProgId")
                        .HasColumnType("int");

                    b.HasKey("KeyId");

                    b.ToTable("Accounting.AccountGroups");

                    b.HasData(
                        new
                        {
                            KeyId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            AccountGroupName = "Assets",
                            ProgId = 1
                        },
                        new
                        {
                            KeyId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            AccountGroupName = "Liabilities",
                            ProgId = 2
                        },
                        new
                        {
                            KeyId = new Guid("8ce77381-3472-4a29-8ba6-dc7d70f23e66"),
                            AccountGroupName = "Income",
                            ProgId = 3
                        },
                        new
                        {
                            KeyId = new Guid("9462ce54-7323-40c7-8210-32a3b3a254be"),
                            AccountGroupName = "Expense",
                            ProgId = 4
                        },
                        new
                        {
                            KeyId = new Guid("8d9c5eed-e58a-4310-85d5-9fd11ea55f4c"),
                            AccountGroupName = "Cash In Hand",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("838c911c-623f-4a8c-b63c-b5aaadc7fa69"),
                            AccountGroupName = "Current Liabilities",
                            ParentGroupId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("45e0bd74-5a00-44a8-b63e-af5e4ac8eac8"),
                            AccountGroupName = "Bank Account",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("918cc17c-f679-4dd6-aee8-bc22758c6a16"),
                            AccountGroupName = "Loan & Advance(Assets)",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("189c3e1d-0751-48c2-a27e-f7670e03088e"),
                            AccountGroupName = "Inventments",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("ed85d0ba-502b-4adb-9541-ac2af25560c6"),
                            AccountGroupName = "Fixed Assets",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("df33ab99-c22d-417f-9e3a-537f177954a3"),
                            AccountGroupName = "Suspense A/c",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("5f4a823b-7e0d-4877-9658-26c8a5921ad5"),
                            AccountGroupName = "Unsecured Loans",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("38df0155-693f-4ed0-bba6-ddb4f78a5b81"),
                            AccountGroupName = "Miscellineous Expenses(Assets)",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("bf02b8a0-4bb0-4892-90d9-17cf9e2bfdb5"),
                            AccountGroupName = "Current Assets",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("0a99203e-80e6-4c4b-9f13-a3143eafce57"),
                            AccountGroupName = "Deposits(Assets)",
                            ParentGroupId = new Guid("488d3ca5-cbf4-45de-a820-ae8e33f31082"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("5cf7d367-69c4-434e-a429-3a6250222695"),
                            AccountGroupName = "Bank OCC",
                            ParentGroupId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("c2928176-40cd-4d7c-b7e3-31c391d4ab5e"),
                            AccountGroupName = "Loan(Liability)",
                            ParentGroupId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("8c5e9b63-048c-4a24-af26-123f33f31253"),
                            AccountGroupName = "Duties & Taxes",
                            ParentGroupId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("e1aeb4a6-f7e0-43a2-bd75-3b877e9911eb"),
                            AccountGroupName = "Sundry Creditors",
                            ParentGroupId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("4d3041e7-4895-44b4-b7ea-f071e9182a68"),
                            AccountGroupName = "Sundry Debitors",
                            ParentGroupId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("23e344e7-1a7d-4a92-8b21-c33b540e6b56"),
                            AccountGroupName = "Provisions",
                            ParentGroupId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("3a33d356-9688-4e84-9da5-881fc26ca4f9"),
                            AccountGroupName = "Capital Account",
                            ParentGroupId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("5aebceab-75ba-41be-ad78-d4af060c8aab"),
                            AccountGroupName = "Branch / Divisions",
                            ParentGroupId = new Guid("98878d64-004b-4440-be67-483127850351"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("3829fe81-18b6-4f46-8036-ec2134a38c82"),
                            AccountGroupName = "Direct Incomes",
                            ParentGroupId = new Guid("8ce77381-3472-4a29-8ba6-dc7d70f23e66"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("d95ed166-2a39-42c8-b03b-861fcacbb66c"),
                            AccountGroupName = "InDirect Incomes",
                            ParentGroupId = new Guid("8ce77381-3472-4a29-8ba6-dc7d70f23e66"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("c87b3cb5-373f-49ac-a627-caa67b702d76"),
                            AccountGroupName = "Provisions",
                            ParentGroupId = new Guid("8ce77381-3472-4a29-8ba6-dc7d70f23e66"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("09cf37fc-c3c2-49a6-aa92-52c7c5bd90be"),
                            AccountGroupName = "Reserves & Surplus",
                            ParentGroupId = new Guid("8ce77381-3472-4a29-8ba6-dc7d70f23e66"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("22cffdf6-85c6-47aa-81f1-26370fbf9aa5"),
                            AccountGroupName = "SalesAccount",
                            ParentGroupId = new Guid("8ce77381-3472-4a29-8ba6-dc7d70f23e66"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("5bf50f3b-fa79-4493-ac5b-37b8bb3d6da6"),
                            AccountGroupName = "Direct Expenses",
                            ParentGroupId = new Guid("9462ce54-7323-40c7-8210-32a3b3a254be"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("e982fb44-167d-4de2-8168-03f8efd28319"),
                            AccountGroupName = "Indirect Expenses",
                            ParentGroupId = new Guid("9462ce54-7323-40c7-8210-32a3b3a254be"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("b7674f29-18da-48e7-8686-b6a636a5b911"),
                            AccountGroupName = "Purchase Accounting",
                            ParentGroupId = new Guid("9462ce54-7323-40c7-8210-32a3b3a254be"),
                            ProgId = 0
                        },
                        new
                        {
                            KeyId = new Guid("639ef160-708f-4568-823f-64197d40076e"),
                            AccountGroupName = "Ratained Earnings",
                            ParentGroupId = new Guid("9462ce54-7323-40c7-8210-32a3b3a254be"),
                            ProgId = 0
                        });
                });

            modelBuilder.Entity("addon365.Accounting.DataEntity.VoucherInfoTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountBookKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CompanyMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("FieldInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VoucherKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.HasIndex("AccountBookKeyId");

                    b.HasIndex("VoucherKeyId");

                    b.ToTable("Accounting.VoucherInfos");
                });

            modelBuilder.Entity("addon365.Accounting.DataEntity.VoucherTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VoucherDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VoucherTypeKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.HasIndex("VoucherTypeKeyId");

                    b.ToTable("Accounting.Vouchers");
                });

            modelBuilder.Entity("addon365.Accounting.DataEntity.VoucherTypeTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProgrammerId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accounting.VoucherTypes");
                });

            modelBuilder.Entity("addon365.Chit.DataEntity.AgentTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.HasIndex("ContactId");

                    b.ToTable("Agency.Agent");

                    b.HasData(
                        new
                        {
                            KeyId = new Guid("4ac9a0ec-d5aa-4972-8f6a-488c74cacd29"),
                            AccessId = "0",
                            ContactId = new Guid("d7f4e8e9-5e3b-4e79-98db-20b817a31813")
                        });
                });

            modelBuilder.Entity("addon365.Chit.DataEntity.ChitGroupTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ChitDueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ChitSchemeKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("TotalDues")
                        .HasColumnType("smallint");

                    b.Property<short>("TotalMember")
                        .HasColumnType("smallint");

                    b.HasKey("KeyId");

                    b.HasIndex("ChitSchemeKeyId");

                    b.ToTable("Chit.ChitGroups");
                });

            modelBuilder.Entity("addon365.Chit.DataEntity.ChitSchemeTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BonusAmount")
                        .HasColumnType("float");

                    b.Property<double>("FinalBonus")
                        .HasColumnType("float");

                    b.Property<bool>("HasFixedDate")
                        .HasColumnType("bit");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("int");

                    b.Property<double>("MonthlyAmount")
                        .HasColumnType("float");

                    b.Property<string>("SchemaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalMonths")
                        .HasColumnType("int");

                    b.HasKey("KeyId");

                    b.ToTable("Chit.ChitSchemes");
                });

            modelBuilder.Entity("addon365.Chit.DataEntity.ChitSubscriberDueTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ChitSubscriberKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DueAmountInfoKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DueNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.HasIndex("ChitSubscriberKeyId");

                    b.HasIndex("DueAmountInfoKeyId");

                    b.ToTable("Chit.ChitSubscriberDues");
                });

            modelBuilder.Entity("addon365.Chit.DataEntity.ChitSubscriberTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AgentKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChitGroupKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClosedVoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.HasIndex("AgentKeyId");

                    b.HasIndex("ChitGroupKeyId");

                    b.HasIndex("CustomerKeyId");

                    b.ToTable("Chit.ChitSubscribers");
                });

            modelBuilder.Entity("addon365.Common.DataEntity.Privilage.BranchPrivilageTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessPrivilageKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueOptions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeyId");

                    b.ToTable("BranchPrivilages");
                });

            modelBuilder.Entity("addon365.Common.DataEntity.Privilage.BusinessPrivilageTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueOptions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeyId");

                    b.ToTable("BusinessPrivilages");

                    b.HasData(
                        new
                        {
                            KeyId = new Guid("11ed6ee7-ec5e-45f7-a28d-dd748365b51f"),
                            CurrentValue = "false",
                            DefaultValue = "false",
                            PropertyName = "Agent",
                            Source = "addon365.Chit.DomainEntity.Feature",
                            ValueOptions = "true,false"
                        });
                });

            modelBuilder.Entity("addon365.Common.DataEntity.Privilage.UserPrivilageTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessPrivilageKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeyId");

                    b.ToTable("UserPrivilages");
                });

            modelBuilder.Entity("addon365.Common.DataEntity.Privilage.UserRolePrivilageTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessPrivilageKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CurrentValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeyId");

                    b.ToTable("UserRolePrivilages");
                });

            modelBuilder.Entity("addon365.Common.DataEntity.UserRoleGroupTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.ToTable("User.UserRoleGroups");
                });

            modelBuilder.Entity("addon365.Common.DataEntity.UserTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OtherId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RoleGroupKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SessionToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeyId");

                    b.HasIndex("RoleGroupKeyId");

                    b.ToTable("User.Users");
                });

            modelBuilder.Entity("addon365.Crm.DataEntity.Address.AddressTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocalityOrVillage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LocalityOrVillageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PinOrZip")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubDistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.ToTable("Crm.Address.Address");
                });

            modelBuilder.Entity("addon365.Crm.DataEntity.BusinessContactTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessMailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyMasterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactAddressKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactPersonKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedDeviceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Landline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProprietorKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecondaryMobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.HasIndex("ContactAddressKeyId");

                    b.HasIndex("ContactPersonKeyId");

                    b.HasIndex("ProprietorKeyId");

                    b.ToTable("Crm.BusinessContacts");
                });

            modelBuilder.Entity("addon365.Crm.DataEntity.ContactTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactAddressKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryMobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeyId");

                    b.HasIndex("ContactAddressKeyId");

                    b.ToTable("Crm.Contacts");

                    b.HasData(
                        new
                        {
                            KeyId = new Guid("d7f4e8e9-5e3b-4e79-98db-20b817a31813"),
                            FirstName = "None"
                        });
                });

            modelBuilder.Entity("addon365.Crm.DataEntity.CustomerTable", b =>
                {
                    b.Property<Guid>("KeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccessId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BusinessContactKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerEmailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("KeyId");

                    b.HasIndex("BusinessContactKeyId");

                    b.HasIndex("ContactKeyId");

                    b.HasIndex("UserKeyId");

                    b.ToTable("Crm.Customers");
                });

            modelBuilder.Entity("addon365.Accounting.DataEntity.AccountBookFieldMapTable", b =>
                {
                    b.HasOne("addon365.Accounting.DataEntity.AccountBookTable", "AccountBookTable")
                        .WithMany()
                        .HasForeignKey("AccountBookKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("addon365.Accounting.DataEntity.VoucherInfoTable", b =>
                {
                    b.HasOne("addon365.Accounting.DataEntity.AccountBookTable", "AccountBook")
                        .WithMany()
                        .HasForeignKey("AccountBookKeyId");

                    b.HasOne("addon365.Accounting.DataEntity.VoucherTable", "Voucher")
                        .WithMany("VoucherInfos")
                        .HasForeignKey("VoucherKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("addon365.Accounting.DataEntity.VoucherTable", b =>
                {
                    b.HasOne("addon365.Accounting.DataEntity.VoucherTypeTable", "VoucherType")
                        .WithMany()
                        .HasForeignKey("VoucherTypeKeyId");
                });

            modelBuilder.Entity("addon365.Chit.DataEntity.AgentTable", b =>
                {
                    b.HasOne("addon365.Crm.DataEntity.ContactTable", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("addon365.Chit.DataEntity.ChitGroupTable", b =>
                {
                    b.HasOne("addon365.Chit.DataEntity.ChitSchemeTable", "ChitSchema")
                        .WithMany()
                        .HasForeignKey("ChitSchemeKeyId");
                });

            modelBuilder.Entity("addon365.Chit.DataEntity.ChitSubscriberDueTable", b =>
                {
                    b.HasOne("addon365.Chit.DataEntity.ChitSubscriberTable", "ChitSubscriber")
                        .WithMany()
                        .HasForeignKey("ChitSubscriberKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("addon365.Accounting.DataEntity.VoucherInfoTable", "DueAmountInfo")
                        .WithMany()
                        .HasForeignKey("DueAmountInfoKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("addon365.Chit.DataEntity.ChitSubscriberTable", b =>
                {
                    b.HasOne("addon365.Chit.DataEntity.AgentTable", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentKeyId");

                    b.HasOne("addon365.Chit.DataEntity.ChitGroupTable", "ChitGroup")
                        .WithMany()
                        .HasForeignKey("ChitGroupKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("addon365.Crm.DataEntity.CustomerTable", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("addon365.Common.DataEntity.UserTable", b =>
                {
                    b.HasOne("addon365.Common.DataEntity.UserRoleGroupTable", "RoleGroup")
                        .WithMany()
                        .HasForeignKey("RoleGroupKeyId");
                });

            modelBuilder.Entity("addon365.Crm.DataEntity.BusinessContactTable", b =>
                {
                    b.HasOne("addon365.Crm.DataEntity.Address.AddressTable", "ContactAddress")
                        .WithMany()
                        .HasForeignKey("ContactAddressKeyId");

                    b.HasOne("addon365.Crm.DataEntity.ContactTable", "ContactPerson")
                        .WithMany()
                        .HasForeignKey("ContactPersonKeyId");

                    b.HasOne("addon365.Crm.DataEntity.ContactTable", "Proprietor")
                        .WithMany()
                        .HasForeignKey("ProprietorKeyId");
                });

            modelBuilder.Entity("addon365.Crm.DataEntity.ContactTable", b =>
                {
                    b.HasOne("addon365.Crm.DataEntity.Address.AddressTable", "ContactAddress")
                        .WithMany()
                        .HasForeignKey("ContactAddressKeyId");
                });

            modelBuilder.Entity("addon365.Crm.DataEntity.CustomerTable", b =>
                {
                    b.HasOne("addon365.Crm.DataEntity.BusinessContactTable", "BusinessContact")
                        .WithMany()
                        .HasForeignKey("BusinessContactKeyId");

                    b.HasOne("addon365.Crm.DataEntity.ContactTable", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactKeyId");

                    b.HasOne("addon365.Common.DataEntity.UserTable", "User")
                        .WithMany()
                        .HasForeignKey("UserKeyId");
                });
#pragma warning restore 612, 618
        }
    }
}
