// <auto-generated />
using System;
using Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Api.Database.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Addon")
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Api.Database.Entity.Accounts.AccountBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookName");

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Identifier");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ProgrammerId");

                    b.Property<Guid>("UnderGroupId");

                    b.HasKey("Id");

                    b.ToTable("AccountBooks");
                });

            modelBuilder.Entity("Api.Database.Entity.Accounts.PaymentMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<string>("ProgrammerId");

                    b.HasKey("Id");

                    b.ToTable("PaymentModes");
                });

            modelBuilder.Entity("Api.Database.Entity.Accounts.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Identifier");

                    b.Property<DateTime>("Modified");

                    b.Property<DateTime>("VoucherDate");

                    b.Property<Guid>("VoucherTypeId");

                    b.HasKey("Id");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Api.Database.Entity.Accounts.VoucherInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("FieldInfo");

                    b.Property<bool>("IsCredit");

                    b.Property<DateTime>("Modified");

                    b.Property<Guid>("VoucherId");

                    b.Property<Guid>("bookId");

                    b.HasKey("Id");

                    b.HasIndex("VoucherId");

                    b.HasIndex("bookId");

                    b.ToTable("VouchersInfo");
                });

            modelBuilder.Entity("Api.Database.Entity.Accounts.VoucherTypeMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("VoucherTypeMasters");
                });

            modelBuilder.Entity("Api.Database.Entity.BranchMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BranchName");

                    b.Property<Guid>("LicenseId");

                    b.Property<string>("Location");

                    b.Property<string>("ShortCode");

                    b.HasKey("Id");

                    b.ToTable("BranchMasters");
                });

            modelBuilder.Entity("Api.Database.Entity.Chit.ChitScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BonusAmount");

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<double>("FinalBonus");

                    b.Property<bool>("HasFixedDate");

                    b.Property<int>("MaxMembers");

                    b.Property<DateTime>("Modified");

                    b.Property<double>("MonthlyAmount");

                    b.Property<string>("SchemaName");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("TotalMonths");

                    b.HasKey("Id");

                    b.ToTable("ChitSchemes");
                });

            modelBuilder.Entity("Api.Database.Entity.Chit.ChitSubriberDue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid?>("ChitSubscriberId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("DueNo");

                    b.Property<DateTime>("Modified");

                    b.Property<Guid?>("VoucherInfoId");

                    b.HasKey("Id");

                    b.HasIndex("ChitSubscriberId");

                    b.HasIndex("VoucherInfoId");

                    b.ToTable("ChitSubscriberDues");
                });

            modelBuilder.Entity("Api.Database.Entity.Chit.ChitSubscriber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid?>("ChitSchemaId");

                    b.Property<Guid?>("ClosedVoucherInfoIdId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<Guid?>("CustomerId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("JoinedDate");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("SubscribeId");

                    b.HasKey("Id");

                    b.HasIndex("ChitSchemaId");

                    b.HasIndex("ClosedVoucherInfoIdId");

                    b.HasIndex("CustomerId");

                    b.ToTable("ChitSubscribers");
                });

            modelBuilder.Entity("Api.Database.Entity.Crm.BusinessContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<string>("BusinessName");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.HasKey("Id");

                    b.ToTable("BusinessContact");
                });

            modelBuilder.Entity("Api.Database.Entity.Crm.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Filter");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Api.Database.Entity.Crm.CampaignInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid>("CampaignId");

                    b.Property<string>("Comments");

                    b.Property<Guid>("ContactId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<Guid>("ModeId");

                    b.Property<DateTime>("Modified");

                    b.Property<Guid>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ModeId");

                    b.HasIndex("StatusId");

                    b.ToTable("CampaignInfos");
                });

            modelBuilder.Entity("Api.Database.Entity.Crm.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<Guid?>("AddressId");

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("FirstName");

                    b.Property<string>("Identifier");

                    b.Property<string>("LastName");

                    b.Property<string>("MobileNumber");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Place");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Api.Database.Entity.Crm.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Identifier");

                    b.Property<DateTime>("Modified");

                    b.Property<Guid?>("ProfileId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Api.Database.Entity.Crm.FollowUpMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FollowUpModes");
                });

            modelBuilder.Entity("Api.Database.Entity.Crm.FollowUpStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FollowUpStatuses");
                });

            modelBuilder.Entity("Api.Database.Entity.DeviceMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorisedUser");

                    b.Property<string>("DeviceId");

                    b.Property<string>("DeviceName");

                    b.Property<int>("OtherId");

                    b.Property<string>("RequestedUser");

                    b.HasKey("Id");

                    b.ToTable("DeviceMasters");
                });

            modelBuilder.Entity("Api.Database.Entity.Employee.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid>("ContactId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<Guid?>("DepartmentId");

                    b.Property<Guid?>("DesignationId");

                    b.Property<string>("Identifier");

                    b.Property<DateTime>("JoiningDate");

                    b.Property<DateTime>("LastDate");

                    b.Property<DateTime>("Modified");

                    b.Property<double>("Salary");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.Enquiry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid>("ContactId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("EnquiryDate");

                    b.Property<Guid>("EnquiryTypeId");

                    b.Property<string>("Identifier");

                    b.Property<DateTime>("Modified");

                    b.Property<Guid>("StatusId");

                    b.Property<Guid?>("VoucherId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EnquiryTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Enquiries");
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryAccessories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccessoriesId");

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<Guid>("EnquiryId");

                    b.Property<DateTime>("Modified");

                    b.Property<Guid>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryId");

                    b.HasIndex("ProductId");

                    b.ToTable("EnquiryAccessories");
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryExchangeQuotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<Guid>("EnquiryId");

                    b.Property<double>("ExpectedAmount");

                    b.Property<string>("Model");

                    b.Property<DateTime>("Modified");

                    b.Property<int>("NoOfOwner");

                    b.Property<double>("QuotatedAmount");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryId");

                    b.ToTable("EnquiryExchangeQuotations");
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryFinanceQuotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<Guid>("EnquiryProductId");

                    b.Property<double>("InitialDownPayment");

                    b.Property<DateTime>("Modified");

                    b.Property<double>("MonthlyEMIAmount");

                    b.Property<int>("NumberOfMonths");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryProductId");

                    b.ToTable("EnquiryFinanceQuotations");
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AccessoriesAmount");

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<Guid>("EnquiryId");

                    b.Property<DateTime>("Modified");

                    b.Property<double>("OnRoadPrice");

                    b.Property<double>("OtherAmount");

                    b.Property<Guid>("ProductId");

                    b.Property<double>("TotalAmount");

                    b.HasKey("Id");

                    b.HasIndex("EnquiryId");

                    b.HasIndex("ProductId");

                    b.ToTable("EnquiryProducts");
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("ProgrammerId");

                    b.HasKey("Id");

                    b.ToTable("EnquiryStatuses");
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("ProgrammerId");

                    b.HasKey("Id");

                    b.ToTable("EnquriyType");
                });

            modelBuilder.Entity("Api.Database.Entity.Finance.FinanceCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FinanceCompanies");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Buyer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid?>("BusinessContactId");

                    b.Property<string>("BuyerId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BusinessContactId");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Products.ExtraFittingsAccessories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AccessoriesProductId");

                    b.Property<Guid?>("AccessoriesProductItemId");

                    b.Property<double>("Amount");

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<Guid>("ProductId");

                    b.Property<double>("Unit");

                    b.Property<double>("UnitPrice");

                    b.HasKey("Id");

                    b.HasIndex("AccessoriesProductItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ExtraFittings");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid>("CompanyId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<double>("GST");

                    b.Property<string>("HSN");

                    b.Property<string>("Identifier");

                    b.Property<double>("InsuranceAmount");

                    b.Property<DateTime>("Modified");

                    b.Property<double>("Price");

                    b.Property<string>("ProductName");

                    b.Property<double>("RoadTax");

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Products.ProductCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Identifier");

                    b.Property<DateTime>("Modified");

                    b.Property<int>("ProgrammerID");

                    b.HasKey("Id");

                    b.ToTable("ProductCompanies");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Products.ProductPropertiesMap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ItemPropertyMasterId");

                    b.Property<Guid>("ProductId");

                    b.HasKey("Id");

                    b.ToTable("ProductPropertiesMaps");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Products.ProductPropertyMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("PropertyMasterId");

                    b.Property<string>("PropertyName");

                    b.HasKey("Id");

                    b.ToTable("ProductPropertyMasters");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Products.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Identifier");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<Guid>("ParentId");

                    b.Property<int>("ProgrammerId");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Purchase.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid>("BusinessContactId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("PurchaseInvoiceNo");

                    b.HasKey("Id");

                    b.HasIndex("BusinessContactId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Purchase.PurchaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("PurchaseId");

                    b.Property<double>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId")
                        .IsUnique();

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Purchase.PurchaseItemProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("ProductPropertyMasterId");

                    b.Property<Guid>("PurchaseItemsId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("PurchaseItemProperties");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Sales.Sale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BillDate");

                    b.Property<string>("BillNo");

                    b.Property<Guid?>("BillingAddressId");

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid>("BuyerId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<Guid?>("ShippingAddressId");

                    b.Property<Guid>("VoucherId");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Sales.SaleItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductId");

                    b.Property<double>("Quantity");

                    b.Property<Guid?>("SaleId");

                    b.Property<Guid>("SalesId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleId");

                    b.ToTable("SaleItems");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Sales.SaleItemProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("ProductPropertyMasterId");

                    b.Property<Guid?>("SaleItemId");

                    b.Property<Guid>("SalesItemsId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SaleItemId");

                    b.ToTable("SaleItemsProperties");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Seller", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<Guid?>("BusinessContactId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("SellerId");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BusinessContactId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Api.Database.Entity.LicenseMaster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BusinessName");

                    b.Property<string>("LicenseId");

                    b.Property<string>("Location");

                    b.HasKey("Id");

                    b.ToTable("LicenseMasters");
                });

            modelBuilder.Entity("Api.Database.Entity.MarketingZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Identifier");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("ZonalDescription");

                    b.Property<string>("ZonalName");

                    b.HasKey("Id");

                    b.ToTable("marketingZones");
                });

            modelBuilder.Entity("Api.Database.Entity.Report.InquiryReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("InquiryReport");
                });

            modelBuilder.Entity("Api.Database.Entity.Threats.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Api.Database.Entity.Threats.Threat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<string>("Host");

                    b.Property<string>("Identifier")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasComputedColumnSql("CONCAT('swc-',[Id])");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Protocol");

                    b.Property<string>("QueryString");

                    b.Property<string>("Referer")
                        .HasMaxLength(255);

                    b.Property<Guid>("StatusId");

                    b.Property<Guid>("TypeId");

                    b.Property<string>("UserAgent");

                    b.Property<string>("XForwardHost");

                    b.Property<string>("XForwardProto");

                    b.HasKey("Id");

                    b.HasIndex("Referer")
                        .IsUnique()
                        .HasFilter("[Referer] IS NOT NULL");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Threats");
                });

            modelBuilder.Entity("Api.Database.Entity.Threats.ThreatType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("BranchMasterId");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("CreatedDeviceId");

                    b.Property<int?>("CreatedUserId");

                    b.Property<DateTime?>("Deleted");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Api.Database.Entity.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfirmPassword");

                    b.Property<int>("OtherId");

                    b.Property<string>("Password");

                    b.Property<string>("SessionToken");

                    b.Property<string>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Api.Database.Entity.Accounts.Voucher", b =>
                {
                    b.HasOne("Api.Database.Entity.Accounts.VoucherTypeMaster", "VoucherTypeMaster")
                        .WithMany()
                        .HasForeignKey("VoucherTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Accounts.VoucherInfo", b =>
                {
                    b.HasOne("Api.Database.Entity.Accounts.Voucher")
                        .WithMany("VoucherInfos")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Accounts.AccountBook", "AccountBook")
                        .WithMany()
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Chit.ChitSubriberDue", b =>
                {
                    b.HasOne("Api.Database.Entity.Chit.ChitSubscriber", "ChitSubscriber")
                        .WithMany()
                        .HasForeignKey("ChitSubscriberId");

                    b.HasOne("Api.Database.Entity.Accounts.VoucherInfo", "VoucherInfo")
                        .WithMany()
                        .HasForeignKey("VoucherInfoId");
                });

            modelBuilder.Entity("Api.Database.Entity.Chit.ChitSubscriber", b =>
                {
                    b.HasOne("Api.Database.Entity.Chit.ChitScheme", "ChitSchema")
                        .WithMany()
                        .HasForeignKey("ChitSchemaId");

                    b.HasOne("Api.Database.Entity.Accounts.VoucherInfo", "ClosedVoucherInfoId")
                        .WithMany()
                        .HasForeignKey("ClosedVoucherInfoIdId");

                    b.HasOne("Api.Database.Entity.Crm.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("Api.Database.Entity.Crm.CampaignInfo", b =>
                {
                    b.HasOne("Api.Database.Entity.Crm.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Crm.FollowUpMode", "Mode")
                        .WithMany()
                        .HasForeignKey("ModeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Crm.FollowUpStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Crm.Customer", b =>
                {
                    b.HasOne("Api.Database.Entity.Crm.Contact", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("Api.Database.Entity.Employee.Employee", b =>
                {
                    b.HasOne("Api.Database.Entity.Crm.Contact", "Profile")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.Enquiry", b =>
                {
                    b.HasOne("Api.Database.Entity.Crm.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Enquiries.EnquiryType", "EnquiryType")
                        .WithMany()
                        .HasForeignKey("EnquiryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Enquiries.EnquiryStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Accounts.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId");
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryAccessories", b =>
                {
                    b.HasOne("Api.Database.Entity.Enquiries.Enquiry", "enquiry")
                        .WithMany()
                        .HasForeignKey("EnquiryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Inventory.Products.Product", "product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryExchangeQuotation", b =>
                {
                    b.HasOne("Api.Database.Entity.Enquiries.Enquiry")
                        .WithMany("EnquiryExchangeQuotations")
                        .HasForeignKey("EnquiryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryFinanceQuotation", b =>
                {
                    b.HasOne("Api.Database.Entity.Enquiries.EnquiryProduct")
                        .WithMany("EnquiryFinanceQuotations")
                        .HasForeignKey("EnquiryProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Enquiries.EnquiryProduct", b =>
                {
                    b.HasOne("Api.Database.Entity.Enquiries.Enquiry")
                        .WithMany("EnquiryProducts")
                        .HasForeignKey("EnquiryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Inventory.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Buyer", b =>
                {
                    b.HasOne("Api.Database.Entity.Crm.BusinessContact", "BusinessContact")
                        .WithMany()
                        .HasForeignKey("BusinessContactId");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Products.ExtraFittingsAccessories", b =>
                {
                    b.HasOne("Api.Database.Entity.Inventory.Products.Product", "AccessoriesProductItem")
                        .WithMany()
                        .HasForeignKey("AccessoriesProductItemId");

                    b.HasOne("Api.Database.Entity.Inventory.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Purchase.Purchase", b =>
                {
                    b.HasOne("Api.Database.Entity.Inventory.Seller", "Seller")
                        .WithMany()
                        .HasForeignKey("BusinessContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Purchase.PurchaseItem", b =>
                {
                    b.HasOne("Api.Database.Entity.Inventory.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Inventory.Purchase.Purchase")
                        .WithOne("Items")
                        .HasForeignKey("Api.Database.Entity.Inventory.Purchase.PurchaseItem", "PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Sales.Sale", b =>
                {
                    b.HasOne("Api.Database.Entity.Inventory.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Crm.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Accounts.Voucher", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Sales.SaleItem", b =>
                {
                    b.HasOne("Api.Database.Entity.Inventory.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Inventory.Sales.Sale")
                        .WithMany("Items")
                        .HasForeignKey("SaleId");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Sales.SaleItemProperty", b =>
                {
                    b.HasOne("Api.Database.Entity.Inventory.Sales.SaleItem")
                        .WithMany("Properties")
                        .HasForeignKey("SaleItemId");
                });

            modelBuilder.Entity("Api.Database.Entity.Inventory.Seller", b =>
                {
                    b.HasOne("Api.Database.Entity.Crm.BusinessContact", "BusinessContact")
                        .WithMany()
                        .HasForeignKey("BusinessContactId");
                });

            modelBuilder.Entity("Api.Database.Entity.Threats.Threat", b =>
                {
                    b.HasOne("Api.Database.Entity.Threats.Status", "Status")
                        .WithMany("Threats")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Entity.Threats.ThreatType", "ThreatType")
                        .WithMany("Threats")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
